import java.nio.file.Files

buildscript {
    ext {
        IS_CI = System.getenv("CI") != null && !System.getenv("CI").isEmpty()
        detektFiles = project.hasProperty("detektFiles") ? project.getProperty("detektFiles") : ""
        kotlinVersion = '1.3.31'
        kotlinCoroutinesVersion = '1.3.0-M2'
        detektVersion = '1.0.0-RC14'
        ktorVersion = '1.2.2'
        koinVersion = '2.0.1'
        jooqVersion = '3.11.11'
        postgresDriverVersion = '42.2.5.jre7'
        flywayVersion = '5.2.4'
        swaggerVersion = '2.9.2'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://dl.bintray.com/kotlin/ktor" }
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath group: "org.jetbrains.kotlin", name: "kotlin-compiler-embeddable", version: kotlinVersion
        classpath group: "org.jetbrains.kotlin", name: 'kotlin-allopen', version: kotlinVersion
        classpath group: "org.jetbrains.kotlin", name: "kotlin-gradle-plugin", version: kotlinVersion
        classpath group: "org.owasp", name: "dependency-check-gradle", version: "3.3.0"
        classpath group: "com.github.ben-manes", name: "gradle-versions-plugin", version: "0.20.0"
        classpath group: "io.gitlab.arturbosch.detekt", name: "detekt-gradle-plugin", version: detektVersion
        classpath group: "io.gitlab.arturbosch.detekt", name: "detekt-formatting", version: detektVersion
    }
}

group 'ktor-server-scaffolding'
version '1.0-SNAPSHOT'

apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'io.gitlab.arturbosch.detekt'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://plugins.gradle.org/m2/' }
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlinVersion
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion
    compile group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: kotlinCoroutinesVersion
    compile group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core-common', version: kotlinCoroutinesVersion
    compile group: 'io.ktor', name: 'ktor-server-core', version: ktorVersion
    compile group: 'io.ktor', name: 'ktor-server-netty', version: ktorVersion
    compile group: 'io.ktor', name: 'ktor-websockets', version: ktorVersion
    implementation group: 'io.ktor', name: 'ktor-locations', version: ktorVersion
    compile group: 'org.koin', name: 'koin-core', version: koinVersion

    compile group: 'org.postgresql', name: 'postgresql', version: postgresDriverVersion
    compile group: 'org.flywaydb', name: 'flyway-core', version: flywayVersion
    compile group: 'com.zaxxer', name: 'HikariCP', version: '3.3.1'
    compile group: 'org.hibernate.validator', name: 'hibernate-validator', version: '6.0.17.Final'
    runtime group: 'org.glassfish', name: 'javax.el', version: '3.0.0' // Hibernate validator depends on this
    compile group: 'org.springframework.security', name: 'spring-security-crypto', version: '5.1.5.RELEASE'

    compile group: 'io.springfox', name: 'springfox-swagger2', version: swaggerVersion
    compile group: 'org.springframework', name: 'spring-web', version: '3.0.2.RELEASE' // Springfox depends on this for HttpMethods
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.9' // Springfox depends on this

    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'org.reflections', name: 'reflections', version: '0.9.11'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.26'
    compile group: 'org.jooq', name: 'jooq', version: jooqVersion
    compile group: 'javax.annotation', name: 'javax.annotation-api', version: '1.2'
    compile group:  'com.squareup.moshi', name: 'moshi-kotlin', version: '1.8.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    compile group: 'com.github.javafaker', name: 'javafaker', version: '1.0.0'

    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.5.1'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.5.1'
    testCompile group: 'io.ktor', name: 'ktor-server-test-host', version: ktorVersion
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.0.0'
    testCompile group: 'org.mockito', name: 'mockito-inline', version: '3.0.0'
    testCompile group: 'com.willowtreeapps.assertk', name: 'assertk-jvm', version: '0.19'
    testCompile group: 'com.nhaarman.mockitokotlin2', name: 'mockito-kotlin', version: '2.1.0'
}

configurations {
    all*.exclude group: 'junit', module: 'junit'
}

sourceSets {
    generated.java {
        srcDir "src/generated"
    }
    main.java.srcDirs += generated.java.srcDirs
}

detekt {
    parallel = true
    filters = ".*/resources/.*,.*/build/.*"
    config = files("./detekt.yml")
    if (detektFiles != "") {
        def changedFiles = detektFiles.readLines().stream().toArray { size -> new String[size] }
        input = files(changedFiles)
    } else {
        input = files("src/main/kotlin", "src/test/kotlin")
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useJUnitPlatform()
}

task run(type: JavaExec) {
    dependsOn(build)
    classpath sourceSets.main.runtimeClasspath
    main = "MainKt"
}

println("Checking for pre-commit installation")
def gitHooksDir = project.file('.git/hooks')
if (gitHooksDir.isDirectory()) {
    if (IS_CI) {
        println("Skipping pre-commit hook installation for CI environments")
    } else {
        def srcHook = project.file('scripts/pre-commit')
        def tgtHook = new File(gitHooksDir, srcHook.name)
        if (!tgtHook.exists() || Files.size(srcHook.toPath()) != Files.size(tgtHook.toPath())) {
            print('Installing git pre-commit hook... ')
            tgtHook.withOutputStream { Files.copy(srcHook.toPath(), it) }
            tgtHook.setExecutable(true)
            println(' Done.')
        } else {
            print('Pre-commit hook is already installed')
        }
    }
}
