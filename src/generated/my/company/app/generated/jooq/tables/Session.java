/*
 * This file is generated by jOOQ.
 */
package my.company.app.generated.jooq.tables;


import my.company.app.db.jooq.binding.TimestampInstantBinding;
import my.company.app.generated.jooq.Indexes;
import my.company.app.generated.jooq.Keys;
import my.company.app.generated.jooq.Public;
import my.company.app.generated.jooq.tables.records.SessionRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Session extends TableImpl<SessionRecord> {

    private static final long serialVersionUID = 1607222270;

    /**
     * The reference instance of <code>public.session</code>
     */
    public static final Session SESSION = new Session();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SessionRecord> getRecordType() {
        return SessionRecord.class;
    }

    /**
     * The column <code>public.session.id</code>.
     */
    public final TableField<SessionRecord, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.session.user_id</code>.
     */
    public final TableField<SessionRecord, UUID> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.session.created_at</code>.
     */
    public final TableField<SessionRecord, Instant> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "", new TimestampInstantBinding());

    /**
     * The column <code>public.session.updated_at</code>.
     */
    public final TableField<SessionRecord, Instant> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new TimestampInstantBinding());

    /**
     * Create a <code>public.session</code> table reference
     */
    public Session() {
        this(DSL.name("session"), null);
    }

    /**
     * Create an aliased <code>public.session</code> table reference
     */
    public Session(String alias) {
        this(DSL.name(alias), SESSION);
    }

    /**
     * Create an aliased <code>public.session</code> table reference
     */
    public Session(Name alias) {
        this(alias, SESSION);
    }

    private Session(Name alias, Table<SessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Session(Name alias, Table<SessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Session(Table<O> child, ForeignKey<O, SessionRecord> key) {
        super(child, key, SESSION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_SESSION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SessionRecord> getPrimaryKey() {
        return Keys.PK_SESSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SessionRecord>> getKeys() {
        return Arrays.<UniqueKey<SessionRecord>>asList(Keys.PK_SESSION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SessionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SessionRecord, ?>>asList(Keys.SESSION__FK_SESSION_USER);
    }

    public User user() {
        return new User(this, Keys.SESSION__FK_SESSION_USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Session as(String alias) {
        return new Session(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Session as(Name alias) {
        return new Session(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Session rename(String name) {
        return new Session(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Session rename(Name name) {
        return new Session(name, null);
    }
}
